=begin

	A mana timer in the form of a window with progress bar/text
	
	Usage: ;manatimer
	Voila a window opens and starts counting ....
	
	counts backwards from 0:00 in the beginning until it gets the first pulse
	
	By Drafix
	
=end
hide_me
silence_me
no_kill_all
no_pause_all
status_tags

CharSettings.load
window_width = CharSettings['window_width'] || 120
window_height = CharSettings['window_height'] || 25
window_position = CharSettings['window_position']
window_decorated = CharSettings['window_decorated']

bar = window = done = window_close = nil

Gtk.queue {
	window = Gtk::Window.new
	window.title = "#{Char.name} Mana Timer"
	window.signal_connect('delete_event') { window_close = true }
	bar = Gtk::ProgressBar.new
	bar.height_request = 10
	bar.width_request = 20
	bar.add_events(Gdk::Event::BUTTON_PRESS_MASK)
	bar.signal_connect('button_press_event') { |owner, ev| Gtk.queue { window.decorated = !window.decorated? if ev.button == 3 } }
	window.add(bar)
	window.show_all
	window.decorated = window_decorated unless window_decorated.nil?
	window.resize(window_width.to_i, window_height.to_i)
	window_position[0] = [[0, window_position[0].to_i].max, (Gdk.screen_width-window_width.to_i)].min
	window_position[1] = [[0, window_position[1].to_i].max, (Gdk.screen_height-window_height.to_i)].min
	window.move(window_position[0].to_i, window_position[1].to_i)
	#window.keep_above = true
	window.set_keep_above(true)
	done = true
}

wait_until { done }

before_dying {
	done = false
	Gtk.queue {
		window_width = window.allocation.width
		window_height = window.allocation.height
		window_decorated = window.decorated?
		window_position = window.position
		window.destroy
		done = true
	}
	wait_until { done }
	CharSettings['window_width'] = window_width
	CharSettings['window_height'] = window_height
	CharSettings['window_decorated'] = window_decorated
	CharSettings['window_position'] = window_position if (window_position.class == Array) and (window_position[0].to_i > -5) and (window_position[1].to_i > -5)
	CharSettings.save
}

ticks = 0

checkpulse = proc {
	offnode = onnode = ended = nil
	action = proc { |server_string|
		if server_string =~ /^\s+Mana gained (off|on) node:\s+(\d+)/
			if $1 == 'off'
				offnode = $2.to_i
			elsif $1 == 'on'
				onnode = $2.to_i
			end
			nil
		elsif server_string =~ /\s+(?:Maximum|Remaining) Mana Points|\s+Mana Control abilities:|MANA (?:PULSE|SPELLUP)|\s+You have used the MANA SPELLUP ability|^\r\n$/
			DownstreamHook.remove('manatimer_check_pulse') if server_string =~ /MANA SPELLUP ability/
			ended = true if server_string =~ /Instantly cast all of your defensive spells\./
			nil
		else
			DownstreamHook.remove('manatimer_check_pulse') if ended
			server_string
		end
	}
	DownstreamHook.add('manatimer_check_pulse', action)
	put 'mana'
	wait_while { DownstreamHook.list.include?('manatimer_check_pulse') }
	[offnode, onnode]
}


Thread.new {
	#BEGIN Mana pulse catcher init code
	mc = [Skills.emc, Skills.smc, Skills.mmc].sort.reverse
	pulse = (mc[0]/10 + mc[1]/20 + mc[2]/20 + maxmana * 0.15).to_i
	beforemana = checkmana
	#End init code
	while line = get
		if line =~ /<dialogData id='expr'.*text='mana \d+\/.+<\/dialogData>/
			ticks = 120
		elsif line =~ /<dialogData id='expr'>/
			ticks = 60
		elsif line =~ /You feel at full magical power again\./
			ticks = 120	
		elsif line =~ /<dialogData id='minivitals'>.*text='mana (\d+)\/.+/
			currentMana = $1.to_i
			diff = currentMana - beforemana
			if diff >= pulse
				offnode, onnode = checkpulse.call
				ticks = 120 if(diff == offnode || diff == onnode)
			end
		end
		if line =~ /text='mana (\d+)\/(.+)/
			beforemana = $1.to_i
		end
	end
}

until window_close
	ticks -= 1
	Gtk.queue {
		bar.fraction = ticks / 120.0
		bar.text =  "#{ "%02d" %(ticks/60)}:#{ "%02d" % (ticks%60)}"
	}
	sleep 1
end


	

	
